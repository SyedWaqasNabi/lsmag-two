<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 */


namespace Ls\Omni\Client\Ecommerce\Entity;

use Ls\Omni\Client\Ecommerce\Entity\Enum\AuthorizationStatus;
use Ls\Omni\Exception\InvalidEnumException;
use Ls\Omni\Client\Ecommerce\Entity\Enum\EFTTransactionType;
use Ls\Omni\Client\Ecommerce\Entity\Enum\EFTVerificationMethod;
use Ls\Omni\Client\Ecommerce\Entity\Enum\EntryStatus;

class TenderLine
{

    /**
     * @property float $Amount
     */
    protected $Amount = null;

    /**
     * @property float $Amt
     */
    protected $Amt = null;

    /**
     * @property string $Description
     */
    protected $Description = null;

    /**
     * @property string $Id
     */
    protected $Id = null;

    /**
     * @property string $StoreId
     */
    protected $StoreId = null;

    /**
     * @property string $TerminalId
     */
    protected $TerminalId = null;

    /**
     * @property string $TransactionId
     */
    protected $TransactionId = null;

    /**
     * @property string $Type
     */
    protected $Type = null;

    /**
     * @property string $CurrencyCode
     */
    protected $CurrencyCode = null;

    /**
     * @property string $CurrencyFactor
     */
    protected $CurrencyFactor = null;

    /**
     * @property string $EFTAuthCode
     */
    protected $EFTAuthCode = null;

    /**
     * @property AuthorizationStatus $EFTAuthStatus
     */
    protected $EFTAuthStatus = null;

    /**
     * @property string $EFTCardName
     */
    protected $EFTCardName = null;

    /**
     * @property string $EFTCardNumber
     */
    protected $EFTCardNumber = null;

    /**
     * @property string $EFTCardType
     */
    protected $EFTCardType = null;

    /**
     * @property string $EFTDateTime
     */
    protected $EFTDateTime = null;

    /**
     * @property string $EFTMessage
     */
    protected $EFTMessage = null;

    /**
     * @property EFTTransactionType $EFTTransType
     */
    protected $EFTTransType = null;

    /**
     * @property string $EFTTransactionId
     */
    protected $EFTTransactionId = null;

    /**
     * @property EFTVerificationMethod $EFTVerificationMethod
     */
    protected $EFTVerificationMethod = null;

    /**
     * @property EntryStatus $EntryStatus
     */
    protected $EntryStatus = null;

    /**
     * @property string $ExternalId
     */
    protected $ExternalId = null;

    /**
     * @property ArrayOfReceiptInfo $ReceiptInfo
     */
    protected $ReceiptInfo = null;

    /**
     * @property string $StaffId
     */
    protected $StaffId = null;

    /**
     * @property string $TenderDescription
     */
    protected $TenderDescription = null;

    /**
     * @property string $TenderTypeId
     */
    protected $TenderTypeId = null;

    /**
     * @property string $_sAmount
     */
    protected $_sAmount = null;

    /**
     * @param float $Amount
     * @return $this
     */
    public function setAmount($Amount)
    {
        $this->Amount = $Amount;
        return $this;
    }

    /**
     * @return float
     */
    public function getAmount()
    {
        return $this->Amount;
    }

    /**
     * @param float $Amt
     * @return $this
     */
    public function setAmt($Amt)
    {
        $this->Amt = $Amt;
        return $this;
    }

    /**
     * @return float
     */
    public function getAmt()
    {
        return $this->Amt;
    }

    /**
     * @param string $Description
     * @return $this
     */
    public function setDescription($Description)
    {
        $this->Description = $Description;
        return $this;
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->Description;
    }

    /**
     * @param string $Id
     * @return $this
     */
    public function setId($Id)
    {
        $this->Id = $Id;
        return $this;
    }

    /**
     * @return string
     */
    public function getId()
    {
        return $this->Id;
    }

    /**
     * @param string $StoreId
     * @return $this
     */
    public function setStoreId($StoreId)
    {
        $this->StoreId = $StoreId;
        return $this;
    }

    /**
     * @return string
     */
    public function getStoreId()
    {
        return $this->StoreId;
    }

    /**
     * @param string $TerminalId
     * @return $this
     */
    public function setTerminalId($TerminalId)
    {
        $this->TerminalId = $TerminalId;
        return $this;
    }

    /**
     * @return string
     */
    public function getTerminalId()
    {
        return $this->TerminalId;
    }

    /**
     * @param string $TransactionId
     * @return $this
     */
    public function setTransactionId($TransactionId)
    {
        $this->TransactionId = $TransactionId;
        return $this;
    }

    /**
     * @return string
     */
    public function getTransactionId()
    {
        return $this->TransactionId;
    }

    /**
     * @param string $Type
     * @return $this
     */
    public function setType($Type)
    {
        $this->Type = $Type;
        return $this;
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->Type;
    }

    /**
     * @param string $CurrencyCode
     * @return $this
     */
    public function setCurrencyCode($CurrencyCode)
    {
        $this->CurrencyCode = $CurrencyCode;
        return $this;
    }

    /**
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->CurrencyCode;
    }

    /**
     * @param string $CurrencyFactor
     * @return $this
     */
    public function setCurrencyFactor($CurrencyFactor)
    {
        $this->CurrencyFactor = $CurrencyFactor;
        return $this;
    }

    /**
     * @return string
     */
    public function getCurrencyFactor()
    {
        return $this->CurrencyFactor;
    }

    /**
     * @param string $EFTAuthCode
     * @return $this
     */
    public function setEFTAuthCode($EFTAuthCode)
    {
        $this->EFTAuthCode = $EFTAuthCode;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTAuthCode()
    {
        return $this->EFTAuthCode;
    }

    /**
     * @param AuthorizationStatus|string $EFTAuthStatus
     * @return $this
     * @throws InvalidEnumException
     */
    public function setEFTAuthStatus($EFTAuthStatus)
    {
        if ( ! $EFTAuthStatus instanceof AuthorizationStatus ) {
            if ( AuthorizationStatus::isValid( $EFTAuthStatus ) ) 
                $EFTAuthStatus = new AuthorizationStatus( $EFTAuthStatus );
            elseif ( AuthorizationStatus::isValidKey( $EFTAuthStatus ) ) 
                $EFTAuthStatus = new AuthorizationStatus( constant( "AuthorizationStatus::$EFTAuthStatus" ) );
            elseif ( ! $EFTAuthStatus instanceof AuthorizationStatus )
                throw new InvalidEnumException();
        }
        $this->EFTAuthStatus = $EFTAuthStatus->getValue();

        return $this;
    }

    /**
     * @return AuthorizationStatus
     */
    public function getEFTAuthStatus()
    {
        return $this->EFTAuthStatus;
    }

    /**
     * @param string $EFTCardName
     * @return $this
     */
    public function setEFTCardName($EFTCardName)
    {
        $this->EFTCardName = $EFTCardName;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTCardName()
    {
        return $this->EFTCardName;
    }

    /**
     * @param string $EFTCardNumber
     * @return $this
     */
    public function setEFTCardNumber($EFTCardNumber)
    {
        $this->EFTCardNumber = $EFTCardNumber;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTCardNumber()
    {
        return $this->EFTCardNumber;
    }

    /**
     * @param string $EFTCardType
     * @return $this
     */
    public function setEFTCardType($EFTCardType)
    {
        $this->EFTCardType = $EFTCardType;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTCardType()
    {
        return $this->EFTCardType;
    }

    /**
     * @param string $EFTDateTime
     * @return $this
     */
    public function setEFTDateTime($EFTDateTime)
    {
        $this->EFTDateTime = $EFTDateTime;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTDateTime()
    {
        return $this->EFTDateTime;
    }

    /**
     * @param string $EFTMessage
     * @return $this
     */
    public function setEFTMessage($EFTMessage)
    {
        $this->EFTMessage = $EFTMessage;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTMessage()
    {
        return $this->EFTMessage;
    }

    /**
     * @param EFTTransactionType|string $EFTTransType
     * @return $this
     * @throws InvalidEnumException
     */
    public function setEFTTransType($EFTTransType)
    {
        if ( ! $EFTTransType instanceof EFTTransactionType ) {
            if ( EFTTransactionType::isValid( $EFTTransType ) ) 
                $EFTTransType = new EFTTransactionType( $EFTTransType );
            elseif ( EFTTransactionType::isValidKey( $EFTTransType ) ) 
                $EFTTransType = new EFTTransactionType( constant( "EFTTransactionType::$EFTTransType" ) );
            elseif ( ! $EFTTransType instanceof EFTTransactionType )
                throw new InvalidEnumException();
        }
        $this->EFTTransType = $EFTTransType->getValue();

        return $this;
    }

    /**
     * @return EFTTransactionType
     */
    public function getEFTTransType()
    {
        return $this->EFTTransType;
    }

    /**
     * @param string $EFTTransactionId
     * @return $this
     */
    public function setEFTTransactionId($EFTTransactionId)
    {
        $this->EFTTransactionId = $EFTTransactionId;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTTransactionId()
    {
        return $this->EFTTransactionId;
    }

    /**
     * @param EFTVerificationMethod|string $EFTVerificationMethod
     * @return $this
     * @throws InvalidEnumException
     */
    public function setEFTVerificationMethod($EFTVerificationMethod)
    {
        if ( ! $EFTVerificationMethod instanceof EFTVerificationMethod ) {
            if ( EFTVerificationMethod::isValid( $EFTVerificationMethod ) ) 
                $EFTVerificationMethod = new EFTVerificationMethod( $EFTVerificationMethod );
            elseif ( EFTVerificationMethod::isValidKey( $EFTVerificationMethod ) ) 
                $EFTVerificationMethod = new EFTVerificationMethod( constant( "EFTVerificationMethod::$EFTVerificationMethod" ) );
            elseif ( ! $EFTVerificationMethod instanceof EFTVerificationMethod )
                throw new InvalidEnumException();
        }
        $this->EFTVerificationMethod = $EFTVerificationMethod->getValue();

        return $this;
    }

    /**
     * @return EFTVerificationMethod
     */
    public function getEFTVerificationMethod()
    {
        return $this->EFTVerificationMethod;
    }

    /**
     * @param EntryStatus|string $EntryStatus
     * @return $this
     * @throws InvalidEnumException
     */
    public function setEntryStatus($EntryStatus)
    {
        if ( ! $EntryStatus instanceof EntryStatus ) {
            if ( EntryStatus::isValid( $EntryStatus ) ) 
                $EntryStatus = new EntryStatus( $EntryStatus );
            elseif ( EntryStatus::isValidKey( $EntryStatus ) ) 
                $EntryStatus = new EntryStatus( constant( "EntryStatus::$EntryStatus" ) );
            elseif ( ! $EntryStatus instanceof EntryStatus )
                throw new InvalidEnumException();
        }
        $this->EntryStatus = $EntryStatus->getValue();

        return $this;
    }

    /**
     * @return EntryStatus
     */
    public function getEntryStatus()
    {
        return $this->EntryStatus;
    }

    /**
     * @param string $ExternalId
     * @return $this
     */
    public function setExternalId($ExternalId)
    {
        $this->ExternalId = $ExternalId;
        return $this;
    }

    /**
     * @return string
     */
    public function getExternalId()
    {
        return $this->ExternalId;
    }

    /**
     * @param ArrayOfReceiptInfo $ReceiptInfo
     * @return $this
     */
    public function setReceiptInfo($ReceiptInfo)
    {
        $this->ReceiptInfo = $ReceiptInfo;
        return $this;
    }

    /**
     * @return ArrayOfReceiptInfo
     */
    public function getReceiptInfo()
    {
        return $this->ReceiptInfo;
    }

    /**
     * @param string $StaffId
     * @return $this
     */
    public function setStaffId($StaffId)
    {
        $this->StaffId = $StaffId;
        return $this;
    }

    /**
     * @return string
     */
    public function getStaffId()
    {
        return $this->StaffId;
    }

    /**
     * @param string $TenderDescription
     * @return $this
     */
    public function setTenderDescription($TenderDescription)
    {
        $this->TenderDescription = $TenderDescription;
        return $this;
    }

    /**
     * @return string
     */
    public function getTenderDescription()
    {
        return $this->TenderDescription;
    }

    /**
     * @param string $TenderTypeId
     * @return $this
     */
    public function setTenderTypeId($TenderTypeId)
    {
        $this->TenderTypeId = $TenderTypeId;
        return $this;
    }

    /**
     * @return string
     */
    public function getTenderTypeId()
    {
        return $this->TenderTypeId;
    }

    /**
     * @param string $_sAmount
     * @return $this
     */
    public function set_sAmount($_sAmount)
    {
        $this->_sAmount = $_sAmount;
        return $this;
    }

    /**
     * @return string
     */
    public function get_sAmount()
    {
        return $this->_sAmount;
    }


}

