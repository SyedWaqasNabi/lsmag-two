<?php
namespace Ls\Omni\Code;

use CaseHelper\CaseHelperFactory;
use CaseHelper\CaseHelperInterface;
use Ls\Omni\Service\Metadata;
use Ls\Omni\Service\ServiceType;
use Zend\Code\Generator\ClassGenerator;
use Zend\Code\Generator\DocBlock\Tag;
use Zend\Code\Generator\DocBlockGenerator;
use Zend\Code\Generator\FileGenerator;
use Zend\Code\Generator\GeneratorInterface;
use Zend\Code\Generator\MethodGenerator;
use Zend\Code\Generator\ParameterGenerator;
use Zend\Code\Generator\PropertyGenerator;

abstract class AbstractGenerator implements GeneratorInterface
{
    /** @var string */
    private $disclaimer = <<<DISCLAIMER
THIS IS AN AUTOGENERATED FILE
DO NOT MODIFY
DISCLAIMER;

    /** @var FileGenerator */
    protected $file;
    /** @var ClassGenerator */
    protected $class;
    /** @var ServiceType */
    protected $service_type;
    /** @var Metadata */
    protected $metadata;
    /** @var string */
    protected $base_namespace;
    /** @var CaseHelperInterface */
    protected $case_helper;

    public function __construct ( Metadata $metadata ) {
        $this->file = new FileGenerator();
        $this->file->setDocBlock( DocBlockGenerator::fromArray( [ 'shortdescription' => $this->disclaimer ] ) );
        $this->class = new ClassGenerator();
        $this->metadata = $metadata;
        $this->service_type = $metadata->getClient()->getServiceType();
        $this->base_namespace = $this->fqn( 'Ls', 'Omni', 'Client', ucfirst( $this->service_type->getValue() ) );
        $this->case_helper = CaseHelperFactory::make( CaseHelperFactory::INPUT_TYPE_SNAKE_CASE );
    }

    /**
     * @return FileGenerator
     */
    protected function getFile () {
        return $this->file;
    }

    /**
     * @return ClassGenerator
     */
    protected function getClass () {
        return $this->class;
    }

    /**
     * @return ServiceType
     */
    protected function getServiceType () {
        return $this->service_type;
    }

    /**
     * @return Metadata
     */
    protected function getMetadata () {
        return $this->metadata;
    }

    /**
     * @param string $slug,...
     *
     * @return string
     */
    public static function fqn ( $slug ) {
        $parts = func_get_args();

        return join( '\\', $parts );
    }

    protected function createProperty ( $name, $type = 'mixed', $flags = [ PropertyGenerator::FLAG_PRIVATE ] ) {
        $ucname = ucfirst( $this->case_helper->toCamelCase( $name ) );

        $this->class->addPropertyFromGenerator(
            PropertyGenerator::fromArray( [ 'name' => $name,
                                            'flags' => $flags,
                                            'docblock' => DocBlockGenerator::fromArray(
                                                [ 'tags' => [ new Tag\PropertyTag( $name, [ $type ] ) ] ] ) ] ) );

        $set_method = new MethodGenerator();
        $set_method->setName( "set$ucname" );
        $set_method->setParameter( ParameterGenerator::fromArray( [ 'name' => $name ] ) );
        $set_method->setDocBlock( DocBlockGenerator::fromArray( [ 'tags' => [ new Tag\ParamTag( $name, $type ),
                                                                              new Tag\ReturnTag( [ '$this' ] ) ] ] ) );
        $set_method->setBody( <<<CODE
\$this->$name = \$$name;
return \$this;
CODE
        );

        $get_method = new MethodGenerator();
        $get_method->setName( "get$ucname" );
        $get_method->setDocBlock( DocBlockGenerator::fromArray( [ 'tags' => [ new Tag\ReturnTag( [ $type ] ) ] ] ) );
        $get_method->setBody( <<<CODE
return \$this->$name;
CODE
        );

        $this->class->addMethodFromGenerator( $set_method );
        $this->class->addMethodFromGenerator( $get_method );

    }

}
